FROM python:3.8-slim-buster as build
# The python base image contains python, pip, etc. in a slim Debian buster 

# Sonar-Scanner (SonarQube client) configuration
# Variables defined with ARG can be modified when building the Docker image
# --> see docker build --build-arg
# Installation directory for sonar-scanner
ARG SONAR_SCANNER_HOME=/opt/sonar-scanner
# sonar-scanner version, allows to control which version will be installed
ARG SONAR_SCANNER_VERSION=4.3.0.2102
ENV SONAR_SCANNER_HOME=${SONAR_SCANNER_HOME} \
    SONAR_SCANNER_VERSION=${SONAR_SCANNER_VERSION} \
    PATH=${SONAR_SCANNER_HOME}/bin:${PATH}

# Install debian packages required for sonar-scanner installation
RUN apt-get update \
    && apt-get install -y --no-install-recommends make ca-certificates wget unzip \
    && rm -rf /var/lib/apt/lists/*

# Install sonar-scanner, based on sonar-scanner-cli Dockerfile --> see docker hub
WORKDIR /opt
RUN wget -U "scannercli" -q -O /opt/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip \
    && unzip sonar-scanner-cli.zip \
    && rm sonar-scanner-cli.zip \
    && mv sonar-scanner-${SONAR_SCANNER_VERSION}-linux ${SONAR_SCANNER_HOME} 

# Copy Python app into image 
WORKDIR /app
COPY . ./sample_project/

# Use Makefile in order to test/analyse and build a Python wheel from the app
WORKDIR /app/sample_project
RUN make dev_deps
# Sonar analysis requires that SonarQube runs on host 'sonarqube' on port 9000
# --> see Makefile
# this can easily be achieved by naming the SonarQube container 'sonarqube' and
# building this image within the same (docker) network where 'sonarqube' runs 
RUN make clean && make SONARHOST=sonarqube

# Start a new stage for the deployment image in order to minimize image size
# --> sonar-scanner and test libs are not required here 
FROM python:3.8-slim-buster
# Create a user which will be used for running the application
# --> do not run application as root
RUN groupadd appuser \
    && useradd --gid appuser --shell /bin/bash --create-home appuser
# Copy the Python wheel from the build image to the deployment image
# --> the specfic name of the wheel is generated by Python setuptools and
# cannot be easily controlled externaly
# --> copy wheel file to its own directory with a generic name in order to
# easily access the wheel from outside the image/container
# --> docker cp does not support wildcards
COPY --from=build /app/sample_project/dist/*.whl /dist/ 
# Install the Python wheel 
#(also installs all dependencies are specified in the wheel)
RUN pip install /dist/*.whl
# Switch user/set user for running the app
USER appuser
# Specify entrypoint in json style 
ENTRYPOINT ["sampleproject"]
# Provide a default arg with CMD
CMD ["--help"]
# Important: both entrypoint and cmd have to be specified in json style
# --> json style allows for better CLI interoperability when running the 
# container
